name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: "20"
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: online_chat_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate
        env:
          DATABASE_URL: mysql://root:root@localhost:3306/online_chat_test

      - name: Run database migrations
        run: npx prisma db push
        env:
          DATABASE_URL: mysql://root:root@localhost:3306/online_chat_test

      - name: Run linting
        run: npm run lint || echo "Linting completed with warnings"

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: mysql://root:root@localhost:3306/online_chat_test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            node_modules/
            package.json
            package-lock.json
            prisma/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Deploy to staging server
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, docker, or cloud deployment commands

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: rsync, docker, or cloud deployment commands

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/online-chat:latest
            ${{ secrets.DOCKER_USERNAME }}/online-chat:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
